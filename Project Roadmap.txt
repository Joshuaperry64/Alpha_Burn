[✓] All code lint, syntax, and indentation errors fixed (August 8, 2025). Codebase is clean and ready for testing.

Alpha_Burn: Project Roadmap & Development Plan
Project Status: Version 1.2 - In Progress
Lead Architect: Alpha
Operator: Joshua Perry

Phase 1: Core Foundation (Complete)
[✓] Project Initialization: Renamed from "Sonic Forge" to "Alpha_Burn".
[✓] Ingestion Engine: Core download functionality using yt-dlp.
[✓] Metamorph AI Tagger: Automated metadata and album art embedding.
[✓] Library Core: Foundational music library display.
[✓] Cinder Burn Engine (UI): User interface for all burning operations is in place.
[✓] Robust Error Handling: Worker-thread-based architecture prevents crashes.
[✓] Persistent Settings: Application settings are saved and loaded.

Phase 2: Feature Expansion (Complete)
[✓] Advanced Burn Control: A dedicated dialog for advanced burning parameters.
[✓] Burn Queue Presets: Ability to save, load, and delete custom burn queue "loadouts".
[✓] Enhanced UI & UX: Comprehensive tooltips, persistent developer credit, and integrated roadmap access.
[✓] File Management Utilities: Automated install.bat and generate_filetree.bat.

Phase 3: AI & Automation (Complete)
[✓] Full Gemini AI Curator Integration: The AI prompt is fully functional for intelligent playlisting.
[✓] Advanced Library Management:
    [✓] Persistent Library Database (SQLite) implemented.
    [✓] Song rating system (1-5 stars) implemented.
    [✓] Manual metadata editor implemented.
[✓] Cinder Burn Engine (Logic):
    [✓] Integration with pycdlib to create ISO files is complete.
    [✓] Execution of the command-line burn process is implemented.
[✓] Spotify Integration: Full functionality to parse a Spotify playlist URL and batch-download tracks.

Phase 4: Drive Operations & Playback (Complete)
[✓] Advanced Burn Settings: Dialog is now fully functional and saves settings.
[✓] CD/DVD Drive Ejection: Implemented for Windows and Linux.
[✓] CD-RW Wiping: Implemented for Windows and Linux.
[✓] CD Reading: Basic implementation for reading disc contents.
[✓] Audio Playback: Implemented basic audio playback controls (Play, Pause, Stop).

Phase 5: AI Control, Automation, and Directory Management (In Progress)
[✓] AI can answer questions about application features (e.g., "what does finalize disc do?").
[✓] AI always knows its environment and its role as the in-app assistant for a CD burning/music downloader application.
[✓] AI responses are filtered to only show the text output, with prefix changed from "Gemini:" to "Alpha:".
[✓] AI can interact with the application: start burn operation, set settings, and more (via exposed methods and chat integration).
[✓] System instructions for the AI are loaded from a .txt file if provided, ensuring the AI always has up-to-date directives.
[✓] Download directory and local music folder are now user-selectable via file browser dialogs in settings and main UI.
[✓] After a music file is fully converted and tagged, it is auto-moved to a user-defined folder (local music folder) if set in settings.
[ ] Add a separate "Local Music Folder" setting (browse dialog) for selecting the user's existing music library.
[ ] Ensure all features are fully implemented and robust (ongoing testing and polish).

Optimizations (Complete)
[✓] Database: Transitioned from an in-memory model to a persistent SQLite database.
[✓] Artwork Caching: The application now caches downloaded album art to reduce network requests.
[✓] Configuration File: Settings have been externalized to a user-editable config.ini file.

Upcoming / To-Do
[ ] Finalize and polish the "Local Music Folder" integration for auto-moving tagged files.
[ ] Expand AI's ability to control more aspects of the application (e.g., advanced settings, batch operations).
[ ] Add more detailed help and tooltips for all new features.
[ ] Continue improving error handling and user feedback.
